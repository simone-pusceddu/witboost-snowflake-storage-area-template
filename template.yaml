apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: snowflake-storage-template.1
  title: Snowflake Storage Area
  description: Create a Snowflake Storage Area for storing data inside a Data Product
  mesh:
    icon: https://avatars.githubusercontent.com/u/6453780?s=280&v=4
  tags:
    - snowflake
    - storage
  annotations:
    backstage.io/techdocs-ref: dir:.
spec:
  generates: componenttype:default/storage
  owner: agilelab
  type: storage
  parameters:
    - title: Component metadata
      description: Basic information for this component.
      required:
        - name
        - domain
        - dataproduct
        - description
      properties:
        name:
          title: Name
          type: string
          description: Required. The name of the component.
          ui:field: EntityNamePicker
          default: Snowflake Storage Area
          ui:options:
            allowArbitraryValues: true
        description:
          title: Description
          type: string
          description: Required. Help others understand what this component is for. What data will it contain?
        domain:
          title: Domain
          type: string
          description: Required. Domain of the Data Product this component belongs to.
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            allowedKinds: 
              - Domain
        dataproduct:
          title: Data Product
          type: string
          description: Required. Data Product this component belongs to.
          ui:field: EntityPicker
          ui:filter:
            - fieldName: domain
              entityPath: spec.domain
          ui:options:
            allowArbitraryValues: false
            allowedKinds: 
              - System
        identifier:
          title: Identifier
          type: string
          description: Autogenerated from the information above. A unique identifier for the component. It will not be editable after creation and is a string composed of [a-zA-Z] separated by any of [-_].
          ui:field: ComponentIdentifierPicker
          ui:options:
            allowArbitraryValues: false
        developmentGroup:
          title: Development Group
          type: string
          description: Automatically selected from the Data Product metadata. Data Product development group.
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.owner
          ui:options:
            allowArbitraryValues: false
        dependsOn:
          title: Dependencies
          type: array
          description: A component could depend on other components in the same Data Product. This information will be used to deploy the components in such an order that their dependencies already exist.
          default: []
          items:
            type: string
            ui:field: EntityComponentsPicker
            ui:fieldName: dataproduct
            ui:options:
              allowArbitraryValues: false
        tags:
          title: Tags
          type: array
          description: Tags for the component.
          default: []
          items:
            type: string        
        domainName:
          type: string
          ui:field: EntitySelectionPicker
          ui:fieldName: domain
          ui:property: spec.mesh.name
          ui:options:
            allowArbitraryValues: false
          ui:widget: hidden
        dataproductName:
          type: string
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.mesh.name
          ui:options:
            allowArbitraryValues: false
          ui:widget: hidden

    - title: Snowflake deployment information
      description: Deployment information for this component, namely its location in Snowflake. 
      required:
        - tableName
      properties:
        database:
          title: Snowflake Database
          type: string
          description: Name of the database in Snowflake. If not provided, a default value (the Domain name, in uppercase) will be assigned during the creation.
          ui:field: RegexPicker
          validation:
            errorMessage: The database name should contain only alphanumeric characters or "_"
            regularExpression: ^[a-zA-Z0-9_]*$
        schema:
          title: Snowflake Schema
          type: string
          description: Name of the schema inside the Snowflake database specified above. If not provided, the default value (the Data Product name ands its major version, separated by _ and in uppercase) will be assigned during the creation.
          ui:field: RegexPicker
          validation:
            errorMessage: The schema name should contain only alphanumeric characters or "_"
            regularExpression: ^[a-zA-Z0-9_]*$
        tableName:
          title: Table Name
          type: string
          description: Required. Name of the table inside the Snowflake schema specifed above.
          ui:field: RegexPicker
          validation:
            errorMessage: The table name should contain only alphanumeric characters or "_"
            regularExpression: ^[a-zA-Z0-9_]+$


    - title: Table schema
      description: Definition of the columns of the table.
      properties:
        schemaColumns:
          title: Column Definitions
          type: array
          ui:ArrayFieldTemplate: ArrayTableTemplate
          items:
            type: object
            ui:ObjectFieldTemplate: TableRowTemplate
            required:
              - name
              - dataType
            properties:
              name:
                type: string
                title: Name
              description:
                type: string
                title: Description
              dataType:
                type: string
                default: TEXT
                title: Data Type
                enum:
                  - TEXT
                  - NUMBER
                  - DATE
                  - BOOLEAN
              constraint:
                type: string
                title: Constraint
                default: (no constraint)
                enum:
                  - PRIMARY_KEY
                  - NOT_NULL
                  - UNIQUE
                  - (no constraint)
            allOf:
              - if:
                  properties:
                    dataType:
                      oneOf:
                        - const: TEXT
                then:
                  properties:
                    dataLength:
                      title: Column Length
                      type: integer
                      description: Maximum length of the text
                      default: 16777216
                  required:
                    - dataLength
              - if:
                  properties:
                    dataType:
                      oneOf:
                        - const: NUMBER
                then:
                  properties:
                    precision:
                      title: Precision
                      type: integer
                      description: Precision of the numeric data type
                      minimum: 1
                      maximum: 38
                      default: 38
                    scale:
                      title: Scale
                      type: integer
                      description: Scale of the numeric data type; cannot be greater than precision minus 1
                      minimum: 0
                      maximum: 37
                      default: 0
                  required:
                    - precision
                    - scale
              - if: true
                then:
                  properties:
                    businessTerms:
                      title: Business Terms
                      type: array
                      description: Multiple selection for fixed tags
                      uniqueItems: true
                      ui:style:
                        minWidth: 400
                      items:
                        type: string
                        enum:
                          - Raw
                          - Derived
                          - Metadata
                          - Identifier
                          - Dimension
                          - Fact
                    piiCheck:
                      title: PII
                      type: boolean


  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: '.'
        values:
          name: '${{ parameters.name }}'
          description: '${{ parameters.description }}'
          domain: '${{ parameters.domain }}'
          dataproduct: '${{ parameters.dataproduct }}'
          domainName: '${{ parameters.domainName }}'
          dataproductName: '${{ parameters.dataproductName }}'
          identifier: '${{ parameters.identifier }}'
          developmentGroup: '${{ parameters.developmentGroup }}'
          dependsOn: '${{ parameters.dependsOn }}'
          tags: '${{ parameters.tags }}'
          database: '${{ parameters.database }}'
          schema: '${{ parameters.schema }}'
          tableName: '${{ parameters.tableName }}'
          schemaColumns: '${{ parameters.schemaColumns }}'
          destination: 'gitlab.com?owner=simone.pusceddu&repo=${{ parameters.name.split(" ") | join("") | lower }}'
          useCaseTemplateId: urn:dmb:utm:snowflake-storage-template:0.0.0
          infrastructureTemplateId: urn:dmb:itm:snowflake-storage-provisioner:0
          rootDirectory: '.'
          artifact_id: '${{ parameters.name }}'
          useCaseTemplateVersion: 0.0.0


    - id: publish
      name: Publish
      action: witboostMeshComponent:publish:gitlab
      input:
        allowedHosts: ['gitlab.com']
        description: 'This is ${{ parameters.name }}'
        repoUrl: 'gitlab.com?owner=AgileDMBSandbox%2F${{orgname}}%2Fmesh.repository%2F${{ parameters.domain | replace(r/domain:| |-/, "") }}%2F${{ parameters.dataproduct.split(".")[1] | replace(r/ |-/g, "") }}&repo=${{ parameters.name.split(" ") | join("") | lower }}'
        rootDirectory: '.'
        dataproduct: '${{ parameters.dataproduct }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '${{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'


  output:
    links:
      - title: Repository
        url: '${{ steps.publish.output.remoteUrl }}'
      - title: Open in catalog
        icon: catalog
        entityRef: '${{ steps.register.output.entityRef }}'
